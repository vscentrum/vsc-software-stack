--- setup.py.orig	2024-04-02 18:56:13.015206000 +0200
+++ setup.py	2024-04-09 10:59:51.731273000 +0200
@@ -12,7 +12,13 @@
 from distutils.dep_util import newer_group
 import numpy as np
 
-
+if os.getenv('EBROOTPYTHON'):
+    print("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
+    print(os.path.abspath('$EBROOTCGAL/include'))
+    # >>> /tmp/vsc47063/easybuild/build/SimNIBS/4.0.1/foss-2023a/SimNIBS/simnibs-4.0.1/$EBROOTCGAL/include
+    print(os.path.join(os.getenv('EBROOTCGAL'), 'include'))
+    # >>> /apps/gent/RHEL8/cascadelake-ib/software/CGAL/5.6-GCCcore-12.3.0/include
+    
 ####################################################
 # add all scripts in the cli folder as 
 # console_scripts or gui_scripts
@@ -40,23 +46,13 @@
 # external stuff for which symlinks or .cmd should be added to the scripts folder
 ########################################################################################################
 external_progs = ['gmsh','meshfix']
-
 bin_dir = os.path.join('simnibs', 'external', 'bin')
-ending=''
-if sys.platform == 'darwin':
-    bin_dir = os.path.join(bin_dir, 'osx')
-elif sys.platform == 'linux':
-    bin_dir = os.path.join(bin_dir, 'linux')
-elif sys.platform == 'win32':
-    bin_dir = os.path.join(bin_dir, 'win')
-    ending='.exe'
-else:
-    raise OSError('OS not supported!')
+bin_dir = os.path.join(bin_dir, 'linux')
 for i in range(len(external_progs)):
-    external_progs[i] = os.path.join(bin_dir, external_progs[i]+ending)
-
-if not sys.platform == 'win32':        
-    external_progs.append(os.path.join('simnibs','external','dwi2cond'))
+    external_progs[i] = os.path.join(bin_dir, external_progs[i])  
+external_progs.append(os.path.join('simnibs','external','dwi2cond'))
+print("EXTERNAL_PROGS: ")
+print(external_progs)
            
 
 ''' C extensions
@@ -81,15 +77,9 @@
 
 '''
 
-# Information for CGAL download
-CGAL_version = '5.4'
-CGAL_headers = os.path.abspath(f'CGAL-{CGAL_version}/include')
-CGAL_url = (
-    f'https://github.com/CGAL/cgal/releases/download/'
-    #f'releases/CGAL-{CGAL_version}/'
-    f'v{CGAL_version}/'
-    f'CGAL-{CGAL_version}-library.zip'
-)
+# Information for CGAL
+CGAL_version = '5.6'
+CGAL_headers = os.path.abspath('$EBROOTCGAL/include')
 cgal_mesh_macros = [
     ('CGAL_MESH_3_NO_DEPRECATED_SURFACE_INDEX', None),
     ('CGAL_MESH_3_NO_DEPRECATED_C3T3_ITERATORS', None),
@@ -142,10 +132,6 @@
 else:
     raise OSError('OS not supported!')
 
-
-#### Setup compilation arguments
-is_conda = 'CONDA_PREFIX' in os.environ
-
 if sys.platform == 'win32':
     petsc_libs = ['libpetsc', 'msmpi']
     petsc_include = [
@@ -212,6 +198,8 @@
         '-Os', '-flto',
         '-frounding-math',
         '-std=gnu++14',
+        # '-Wno-cpp',
+        # '-w',
     ]
     cgal_mesh_macros += [('NOMINMAX', None)]
     cgal_link_args = None
@@ -245,7 +233,7 @@
     cgal_dirs = ['simnibs/external/lib/osx']
     cgal_runtime = None
     cgal_compile_args = [
-        '-std=gnu++14',
+        '-std=gnu++20',
         '-stdlib=libc++',
     ]
     cgal_mesh_macros += [('NOMINMAX', None)]
@@ -262,23 +250,26 @@
 cython_msh = Extension(
     'simnibs.mesh_tools.cython_msh',
     ["simnibs/mesh_tools/cython_msh.pyx"],
-    include_dirs=[np.get_include()]
+    include_dirs=[np.get_include()],
+    extra_compile_args=['-w'],
 )
 marching_cubes_lewiner_cy = Extension(
     'simnibs.segmentation._marching_cubes_lewiner_cy',
     ["simnibs/segmentation/_marching_cubes_lewiner_cy.pyx"],
-    include_dirs=[np.get_include()]
+    include_dirs=[np.get_include()],
+    extra_compile_args=['-w'],
 )
 cat_c_utils = Extension(
     'simnibs.segmentation._cat_c_utils',
     ["simnibs/segmentation/_cat_c_utils.pyx", "simnibs/segmentation/cat_c_utils/genus0.c"],
     include_dirs=[np.get_include(), 'simnibs/segmentation/cat_c_utils'],
-    extra_compile_args=cat_compile_args
+    extra_compile_args=['-w'],
 )
 thickness = Extension(
     'simnibs.segmentation._thickness',
     ["simnibs/segmentation/_thickness.pyx"],
-    include_dirs=[np.get_include()]
+    include_dirs=[np.get_include()],
+    extra_compile_args=['-w'],
 )
 petsc_solver = Extension(
     'simnibs.simulation.petsc_solver',
@@ -288,7 +279,8 @@
     library_dirs=petsc_dirs,
     libraries=petsc_libs,
     runtime_library_dirs=petsc_runtime,
-    extra_link_args=petsc_extra_link_args
+    extra_link_args=petsc_extra_link_args,
+    extra_compile_args=['-w'],
 )
 # I separated the CGAL functions into several files for two reasons
 # 1. Reduce memory consumption during compilation in Linux
@@ -510,13 +502,5 @@
           'cython'
       ],
       tests_require=['pytest', 'mock'],
-      zip_safe=False)
-
-
-script_dir = shutil.which('simnibs')
-if script_dir is None:
-    raise IOError('could not locate folder with console-scripts')
-else:
-    script_dir = os.path.dirname(script_dir)
-    add_symlinks_or_cmd(external_progs,script_dir)
-    
+      zip_safe=False
+)
