easyblock = 'MakeCp'

name = 'NextPolish'
version = '1.4.1'

homepage = 'https://github.com/Nextomics/NextPolish'
description = 'NextDenovo is a string graph-based de novo assembler for long reads.'

toolchain = {'name': 'GCCcore', 'version': '12.3.0'}

source_urls = ['https://github.com/Nextomics/NextPolish/releases/download/']
sources = [{
    'download_filename': 'v%(version)s/%(name)s.tgz',
    'filename': SOURCE_TAR_GZ,
}]
checksums = ['2a5f66f3db7f76e583a6b6e28f9c1f3c392258b8d755050d7abe129a2fbb48c4']

builddependencies = [('binutils', '2.40')]
dependencies = [
    ('Python', '3.11.3'),
    ('Python-bundle-PyPI', '2023.06'),
    ('BWA', '0.7.17'),
]

exts_defaultclass = 'PythonPackage'
exts_default_options = {
    'source_urls': [PYPI_SOURCE],
    'download_dep_fail': True,
    'use_pip': True,
    'sanity_pip_check': True,
    'preinstallopts': '',
    'installopts': '',
}

exts_list = [
    ('Paralleltask', '0.2.3', {
        'modulename': 'paralleltask',
        'checksums': ['8015a8311d5021bc44edbfbf45ff2557a529999e235d25190bac62993fdf7b66'],
    }),
]

# fix make -C util - warning: jobserver unavailable
parallel = 1

# fix bwa bug
# https://github.com/Nextomics/NextPolish/issues/83
prebuildopts = "sed -i 's/seq_count bwa samtools minimap2/seq_count samtools minimap2/' Makefile && "
prebuildopts += "rm -rf util/bwa && "
prebuildopts += (
    "sed -i"
    " -e 's/seq_count bwa_ samtools_/seq_count samtools_/'"
    " -e '29d'" #  @+make clean -C $(BWADIR)
    " -e '18,20d'" #  bwa_:	@+make -C $(BWADIR)
    " -e '1d'" #  BWADIR = ./bwa
    " util/Makefile && "
)
postinstallcmds = ['cd %(installdir)s/bin && ln -s $EBROOTBWA/bin/bwa']

files_to_copy = ['bin', 'lib', 'test_data', 'LICENSE', 'nextPolish']

sanity_check_paths = {
    'files': ['nextPolish', 'bin/minimap2', 'bin/paralleltask', 'bin/bwa'],
    'dirs': ['test_data', 'lib/python%(pyshortver)s/site-packages'],
}

sanity_check_commands = ['nextPolish --help']

modextrapaths = {
    'PYTHONPATH': 'lib/python%(pyshortver)s/site-packages',
    'PATH': '',
}

moduleclass = 'bio'

# ERROR1:
    # 
    # https://github.com/Nextomics/NextPolish/issues/83 -> https://github.com/lh3/bwa/issues/314#issuecomment-860659220
    # -> parallel = 1 -> error
        # == 2024-08-26 16:25:31,684 build_log.py:171 ERROR EasyBuild crashed with an error (at easybuild/easybuild-framework/easybuild/base/exceptions.py:126 in __init__): cmd " make  -j 1 " exited with exit code 2 and output:
        # mkdir /tmp/vsc47063/easybuild/build/NextPolish/1.4.1/GCCcore-12.3.0/NextPolish/bin
        # make -C util;
        # make[1]: Entering directory '/tmp/vsc47063/easybuild/build/NextPolish/1.4.1/GCCcore-12.3.0/NextPolish/util'
        # gcc -Wall -O3 -s -pthread -o seq_split seq_split.c thpool.c -lz 
        # seq_split.c: In function get_fp_index:
        # seq_split.c:76:13: warning: overflow in conversion from uint32_t {aka unsigned int} to int changes value from count = 
        # 4294967295 to -1 [-Woverflow]
        # 76 |         k = count = -1;
        #     |             ^~~~~
        # seq_split.c: In function main:
        # seq_split.c:406:32: warning: sprintf may write a terminating nul past the end of the destination [-Wformat-overflow=]
        # 406 |         sprintf(opt.out, "%s/%s", opt.outdir, opt.outpre);
        #     |                                ^
        # seq_split.c:406:9: note: sprintf output 2 or more bytes (assuming 1025) into a destination of size 1024
        # 406 |         sprintf(opt.out, "%s/%s", opt.outdir, opt.outpre);
        #     |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        # seq_split.c:162:33: warning: %03d directive writing between 3 and 10 bytes into a region of size between 0 and 1023 [-
        # Wformat-overflow=]
        # 162 |                 sprintf(fn, "%s.%03d.%s", opt->out, i, suffix);
        #     |                                 ^~~~
        # In function init_fp,
        #     inlined from main at seq_split.c:409:13:
        # seq_split.c:162:29: note: directive argument in the range [0, 2147483646]
        # 162 |                 sprintf(fn, "%s.%03d.%s", opt->out, i, suffix);
        #     |                             ^~~~~~~~~~~~
        # seq_split.c:162:17: note: sprintf output between 14 and 1044 bytes into a destination of size 1024
        # 162 |                 sprintf(fn, "%s.%03d.%s", opt->out, i, suffix);
        #     |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # The warning `warning: jobserver unavailable: using -j1. Add '+' to parent make rule.` occurs during the build process when you use the `make` command. This warning indicates an issue related to parallel execution of jobs, particularly in nested or recursive `make` invocations. Here's a breakdown of what it means and how to fix it:
    # ### What the Warning Means
    # 1. **Jobserver**: 
    # - The jobserver is a feature of GNU `make` that allows it to manage parallel execution of tasks (jobs). When you run `make` with the `-j` option (e.g., `make -j4`), it tells `make` to execute up to 4 jobs in parallel. The jobserver manages this, ensuring that no more than the specified number of jobs run simultaneously.
    # 2. **Jobserver Unavailable**:
    # - This warning occurs because a child `make` process (a `make` invocation called by another `make` process) is trying to run with parallelism (using `-j`), but it cannot access the jobserver from its parent. Without access to the jobserver, the child `make` falls back to serial execution, meaning it only runs one job at a time (`-j1`).
    # 3. **Adding `+` to the Parent Make Rule**:
    # - The suggestion to add `+` to the parent `make` rule is a way to inform `make` that this particular rule will invoke another `make` command that should inherit the jobserver's settings. The `+` prefix in the recipe tells `make` to treat the command as if it were invoked in parallel, thus correctly passing the jobserver information to the child `make` process.
    # ### How to Fix It
    # To fix this warning, you need to modify the `Makefile` where the recursive `make` is invoked. Specifically, locate the line where the recursive `make` command is called and add a `+` sign at the beginning of the command. For example:
    # **Before:**
    # ```make
    # subdir:
    #     cd subdir && $(MAKE)
    # ```
    # **After:**
    # ```make
    # subdir:
    #     +cd subdir && $(MAKE)
    # ```
    # ### Explanation:
    # - The `+` sign ensures that the jobserver is correctly passed to the child `make` process, allowing it to respect the parallel job limit specified by the parent `make`.
    # ### Other Considerations:
    # - Ensure that the parent `make` command is being invoked with the `-j` option, and if possible, try to avoid unnecessary recursive `make` calls, which can complicate parallel build processes.
    # By making this change, the warning should disappear, and the build process should work as expected with the specified level of parallelism.
    
    # == 2024-08-26 16:14:53,667 build_log.py:171 ERROR EasyBuild crashed with an error (at easybuild/easybuild-framework/ea
    # sybuild/base/exceptions.py:126 in __init__): cmd " make  -j 8 " exited with exit code 2 and output:
    # mkdir /tmp/vsc47063/easybuild/build/NextPolish/1.4.1/GCCcore-12.3.0/NextPolish/bin
    # make -C util;
    # make[1]: warning: jobserver unavailable: using -j1.  Add '+' to parent make rule.