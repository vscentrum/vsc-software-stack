easyblock = 'PythonPackage'

name = 'Theano'
version = '1.1.2'
versionsuffix = '-PyMC'

homepage = 'https://deeplearning.net/software/theano'
description = """Theano is a Python library that allows you to define, optimize,
and evaluate mathematical expressions involving multi-dimensional arrays efficiently."""

toolchain = {'name': 'foss', 'version': '2023a'}

source_urls = ['https://pypi.python.org/packages/source/T/Theano%(versionsuffix)s']
sources = ['Theano-PyMC-%(version)s.tar.gz']
checksums = ['5da6c2242ea72a991c8446d7fe7d35189ea346ef7d024c890397011114bf10fc']

dependencies = [
    ('Python', '3.11.3'),
    ('Python-bundle-PyPI', '2023.06'),
    ('SciPy-bundle', '2023.07'),
]

download_dep_fail = True
use_pip = True
sanity_pip_check = True

preinstallopts = "sed -i 's/np.bool_/bool/' theano/scalar/basic.py && "
fix_python_shebang_for = ['bin/theano-cache', 'bin/theano-nose']

sanity_check_paths = {
    'files': ['bin/theano-cache'],
    'dirs': ['lib/python%(pyshortver)s/site-packages'],
}

local_blas_warning = "Using NumPy C-API based implementation for BLAS functions"
sanity_check_commands = [
    # make sure that warning about falling back to (slow) NumPy C-API for BLAS functions is *not* printed
    # mkl-service dependency is required to ensure this doesn't happen
    "python -c 'import theano.tensor' 2>&1 | grep '%s'; test $? != 0" % local_blas_warning,
]

moduleclass = 'math'

# ERROR1:
    # /scratch/gent/vo/001/gvo00117/easybuild/RHEL8/cascadelake-ampere-ib/software/Theano/1.1.2-foss-2023a-PyMC/lib/python3.11/site-packages/theano/scalar/basic.py:2412: FutureWarning: In the future `np.bool` will be defined as the corres ponding NumPy scalar.
    # self.ctor = getattr(np, o_type.dtype)
    # Traceback (most recent call last):
    # File "<string>", line 1, in <module>
    # File "/scratch/gent/vo/001/gvo00117/easybuild/RHEL8/cascadelake-ampere-ib/software/Theano/1.1.2-foss-2023a-PyMC/lib/python3.11/site-packages/theano/__init__.py", line 83, in <module>
    #     from theano import scalar, tensor
    # File "/scratch/gent/vo/001/gvo00117/easybuild/RHEL8/cascadelake-ampere-ib/software/Theano/1.1.2-foss-2023a-PyMC/lib/python3.11/site-packages/theano/scalar/__init__.py", line 1, in <module>
    #     from .basic import *
    # File "/scratch/gent/vo/001/gvo00117/easybuild/RHEL8/cascadelake-ampere-ib/software/Theano/1.1.2-foss-2023a-PyMC/lib/python3.11/site-packages/theano/scalar/basic.py", line 2460, in <module>
    #     convert_to_bool = Cast(bool, name="convert_to_bool")
    #                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    # File "/scratch/gent/vo/001/gvo00117/easybuild/RHEL8/cascadelake-ampere-ib/software/Theano/1.1.2-foss-2023a-PyMC/lib/python3.11/site-packages/theano/scalar/basic.py", line 2412, in __init__
    #     self.ctor = getattr(np, o_type.dtype)
    #                 ^^^^^^^^^^^^^^^^^^^^^^^^^
    # File "/apps/gent/RHEL8/cascadelake-ib/software/SciPy-bundle/2023.07-gfbf-2023a/lib/python3.11/site-packages/numpy/__init__.py", line 313, in __getattr__
    #     raise AttributeError(__former_attrs__[attr])
    # AttributeError: module 'numpy' has no attribute 'bool'.
    # `np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    # The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:
    #     https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. Did you mean: 'bool_'? (at easybuild/easybuild-framework/easybuild/framework/easyblock.py:3670 in _sanity_check_step)